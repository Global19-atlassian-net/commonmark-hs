* TODO plan for fast2 version
** Don't use tokens
** Use parsec
** In Inlines, define a custom Stream type that includes source location information
e.g. [Tok] where
data Tok = SourceLoc SourcePos | SourceLine Text
* TODO stack overflow
The stack space required goes up with size of input:

without profiling
python -c 'print("aa\n"*30000)' | commonmark +RTS  -K100K  > /dev/null
commonmark: Stack space overflow: current size 33624 bytes.
commonmark: Use `+RTS -Ksize -RTS' to increase it.

wiht profiling:
% python -c 'print("aa\n"*3000)' | commonmark +RTS -s  -xc -K320K > /dev/null
s.hs:(1033,1)-(1040,77))
Commonmark.Blocks.paraSpec.\ (src/Commonmark/Blocks.hs:(442,10)-(478,59))
Commonmark.Blocks.defaultFinalizer (src/Commonmark/Blocks.hs:(292,1)-(293,57))
Commonmark.Util.restOfLine (src/Commonmark/Util.hs:(179,1)-(185,57))
Commonmark.Blocks.docSpec.\ (src/Commonmark/Blocks.hs:(393,13)-(395,45))
Commonmark.Blocks.paraSpec.\ (src/Commonmark/Blocks.hs:(439,10)-(440,65))
Commonmark.Blocks.runInlineParser (src/Commonmark/Blocks.hs:(346,1)-(352,68))
Commonmark.Blocks.inlineParser (src/Commonmark/Blocks.hs:319:8-19)
Commonmark.Blocks.processLine.\ (src/Commonmark/Blocks.hs:153:38-61)
Commonmark.Blocks.processLine.\ (src/Commonmark/Blocks.hs:(199,24)-(210,7))
Commonmark.Blocks.processLine.\ (src/Commonmark/Blocks.hs:147:31-63)
Commonmark.Inlines.mkInlineParser (src/Commonmark/Inlines.hs:(67,1)-(78,51))
Commonmark.Inlines.parseChunks (src/Commonmark/Inlines.hs:(116,1)-(130,56))
Commonmark.Inlines.pChunk (src/Commonmark/Inlines.hs:(275,1)-(279,26))
Commonmark.Inlines.pInline (src/Commonmark/Inlines.hs:(354,1)-(363,48))
Commonmark.Util.withRaw (src/Commonmark/Util.hs:(129,1)-(134,23))
Commonmark.Inlines.pSymbol (src/Commonmark/Inlines.hs:516:1-44)
Commonmark.Inlines.pNonDelimTok (src/Commonmark/Inlines.hs:(289,1)-(293,25))
Main.specFromExtensionNames (src/convert.hs:(165,1)-(176,35))
Commonmark.Syntax.defaultSyntaxSpec (src/Commonmark/Syntax.hs:(42,1)-(48,3))
Commonmark.Inlines.defaultInlineParsers (src/Commonmark/Inlines.hs:(81,1)-(90,17))
Commonmark.Inlines.pWords (src/Commonmark/Inlines.hs:(502,1)-(504,30))
Main.main.\ (src/convert.hs:(117,11)-(121,26))
*** Exception (reporting due to +RTS -xc): (THUNK_STATIC), stack trace: 
  Main.main.\,
  called from Commonmark.Inlines.pWords,
  called from Commonmark.Inlines.defaultInlineParsers,
  called from Commonmark.Syntax.defaultSyntaxSpec,
  called from Main.specFromExtensionNames,
  called from Commonmark.Inlines.pNonDelimTok,
  called from Commonmark.Inlines.pSymbol,
  called from Commonmark.Util.withRaw,
  called from Commonmark.Inlines.pInline,
  called from Commonmark.Inlines.pChunk,
  called from Commonmark.Inlines.parseChunks,
  called from Commonmark.Inlines.mkInlineParser,
  called from Commonmark.Blocks.processLine.\,
  called from Commonmark.Blocks.processLine.\,
  called from Commonmark.Blocks.processLine.\,
  called from Commonmark.Blocks.inlineParser,
  called from Commonmark.Blocks.runInlineParser,
  called from Commonmark.Blocks.paraSpec.\,
  called from Commonmark.Blocks.docSpec.\,
  called from Commonmark.Util.restOfLine,
  called from Commonmark.Blocks.defaultFinalizer,
  called from Commonmark.Blocks.paraSpec.\,
  called from Commonmark.Blocks.collapseNodeStack,
  called from Commonmark.Blocks.docSpec.\,
  called from Commonmark.Blocks.docSpec,
  called from Commonmark.Blocks.blockContinue,
  called from Commonmark.Blocks.processLine.checkContinue,
  called from Commonmark.Util.satisfyTok,
  called from Commonmark.Util.lineEnd,
  called from Commonmark.Blocks.paraSpec,
  called from Commonmark.Blocks.processLine,
  called from Commonmark.Util.skipManyTill.scan,
  called from Commonmark.Util.skipManyTill,
  called from Commonmark.Blocks.processLines,
  called from Commonmark.Blocks.mkBlockParser,
  called from Commonmark.Parser.parseCommonmarkWith,
  called from Main.main
commonmark: Stack space overflow: current size 33568 bytes.
commonmark: Use `+RTS -Ksize -RTS' to increase it.
     165,259,944 bytes allocated in the heap
      17,999,200 bytes copied during GC
       3,223,248 bytes maximum residency (5 sample(s))
         246,064 bytes maximum slop
               3 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0       155 colls,   155 par    0.060s   0.022s     0.0001s    0.0011s
  Gen  1         5 colls,     4 par    0.032s   0.010s     0.0021s    0.0040s

  Parallel GC work balance: 16.92% (serial 0%, perfect 100%)

  TASKS: 10 (1 bound, 9 peak workers (9 total), using -N4)

  SPARKS: 0(0 converted, 0 overflowed, 0 dud, 0 GC'd, 0 fizzled)

  INIT    time    0.001s  (  0.003s elapsed)
  MUT     time    0.098s  (  0.125s elapsed)
  GC      time    0.092s  (  0.032s elapsed)
  RP      time    0.000s  (  0.000s elapsed)
  PROF    time    0.000s  (  0.000s elapsed)
  EXIT    time    0.000s  (  0.001s elapsed)
  Total   time    0.191s  (  0.161s elapsed)

  Alloc rate    1,684,074,797 bytes per MUT second

  Productivity  51.3% of total user, 77.7% of total elapsed~

* TODO example roff man writer
In roff, the effect of an 'emph' might
be `\f[I]`, but it might be `\f[BI]` (if we're already in a
boldface section).  The current setup gives us no way to be
context-sensitive in this way.  If, instead of a function 'emph',
we emitted something we could pattern match on -- say,
`(Emph, ...)`, producing a kind of AST, then we'd be able to
handle this.

Solution: make the IsInline type for roff be a newtype
embeddding State EmphState Builder or something like
that.  Then the effect can be state dependenet.
* TODO extensions
** DONE fix definition list
currently it just creates one item lists.
Fix: when finalizing a list item, check to see if previous
node is a def list; if so, merge the two.
** TODO attributes (link/image/code/codeblock/header)
- [ ] attribute parser
- [ ] for header, parse inlines
** TODO bracketed spans
** TODO code_identifiers
** TODO fenced divs
** TODO auto_identifiers (headers)
** TODO grid tables
* TODO documentation
** TODO example of creating instances for roff man
** TODO example of modifying existing HTML output
** TODO example of adding an inline parser: abbreviations?
* TODO create a sample markdown linter
do a specific transformation on semantically identified
text (e.g. capitalization)
without changing anything else about the source text.
* TODO reduce memory usage, increase performance

