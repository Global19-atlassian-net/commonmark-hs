* TODO data- prefixes in HTML attributes
like in pandoc, with whitelist and exceptions
* TODO extensions
** TODO example_lists
** TODO implicit_figures
** TODO line_blocks
** TODO task_lists
** TODO yaml_metadata_block
in a separate package, or just in pandoc itself?
to avoid yaml dependency
** TODO pandoc_title_block
in a separate package, or just in pandoc itself?
** TODO citations
tricky: need to make sure this comes first in bracketed specs to avoid
interpretation as a span.
** TODO simple tables
** TODO multiline tables
** TODO grid tables
* TODO create a markdown-aware spell checker
emits source locations and misspelled words,
or applies a special attribute...
* TODO create a sample markdown linter
do a specific transformation on semantically identified
text (e.g. capitalization)
without changing anything else about the source text.
* TODO example roff man writer
In roff, the effect of an 'emph' might
be `\f[I]`, but it might be `\f[BI]` (if we're already in a
boldface section).  The current setup gives us no way to be
context-sensitive in this way.  If, instead of a function 'emph',
we emitted something we could pattern match on -- say,
`(Emph, ...)`, producing a kind of AST, then we'd be able to
handle this.

Solution: make the IsInline type for roff be a newtype
embeddding State EmphState Builder or something like
that.  Then the effect can be state dependenet.

Would it make sense to do this for footnotes instead of
including the ad hoc after document thing?
* TODO documentation
** TODO example of creating instances for roff man
** TODO example of modifying existing HTML output
** TODO example of adding an inline parser: abbreviations?
* TODO reduce memory usage, increase performance

